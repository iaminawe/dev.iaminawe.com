<?php
// $Id$

/**
 * @file
 * Demonstrate basic module socialmedia.
 */

define('SOCIALMEDIA_WIDTH_DEFAULT', '292');
define('SOCIALMEDIA_HEIGHT_DEFAULT', '300');
define('SOCIALMEDIA_COLOR_BODY_BACKGROUND_DEFAULT', '#F6F6F2');
define('SOCIALMEDIA_COLOR_BODY_TEXT_DEFAULT', '#3B3B3B');
define('SOCIALMEDIA_COLOR_BODY_LINKTEXT_DEFAULT', '#0779BF');
define('SOCIALMEDIA_COLOR_HEADER_BACKGROUND_DEFAULT', '#DDDDDD');
define('SOCIALMEDIA_COLOR_HEADER_TEXT_DEFAULT', '#3B3B3B');
define('SOCIALMEDIA_COLOR_BORDER_DEFAULT', '#D6D6D6');
define('SOCIALMEDIA_ICON_DEFAULT_STYLE_DEFAULT', 'levelten_glossy:32x32');

// TODO figure out better way to include widgetx_elements
include_once drupal_get_path('module', 'socialmedia') . '/socialmedia.widgets.inc';
include_once drupal_get_path('module', 'socialmedia') . '/socialmedia.platforms.inc';
include_once drupal_get_path('module', 'socialmedia') . '/socialmedia.icons.inc';


/**
 * Implements hook_permission().
 */
function socialmedia_permission() {
  return array(
    'administer social media' => array(
      'title' => t('Administer social media'),
      'description' => t('Can configure any social media settings and profiles.'),
    ),
    'administer own profiles' => array(
      'title' => t('Administer own profiles'),
      'description' => t('Can setup user level social media profiles for their user account.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function socialmedia_menu() {
  // Module settings.
  $items['admin/config/media/socialmedia'] = array(
    'title' => 'Social media',
    'description' => 'Social media defaults and site profile settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialmedia_admin_settings'),
    'access arguments' => array('administer social media'),
    'file' => 'socialmedia.admin.inc',
    'file path' => drupal_get_path('module', 'socialmedia'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/config/media/socialmedia/settings'] = array(
    'title' => 'Settings',
    'description' => 'Social media defaults and site profile settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialmedia_admin_settings'),
    'access arguments' => array('administer social media'),
    'file' => 'socialmedia.admin.inc',
    'file path' => drupal_get_path('module', 'socialmedia'),
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/media/socialmedia/profiles'] = array(
    'title' => 'Profiles',
    'description' => 'Social media profile configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialmedia_admin_profiles_form'),
    'access arguments' => array('administer social media'),
    'file' => 'socialmedia.admin.inc',
    'file path' => drupal_get_path('module', 'socialmedia'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/media/socialmedia/widgets'] = array(
    'title' => 'Widgets',
    'description' => 'Social media widget sets configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialmedia_admin_profile_widgets_form'),
    'access arguments' => array('administer social media'),
    'file' => 'socialmedia.admin.inc',
    'file path' => drupal_get_path('module', 'socialmedia'),
    'weight' => 1,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/media/socialmedia/widgets/profile'] = array(
    'title' => 'Default profile set',
    'description' => 'Social media default profile widget sets configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialmedia_admin_profile_widgets_form'),
    'access arguments' => array('administer social media'),
    'file' => 'socialmedia.admin.inc',
    'file path' => drupal_get_path('module', 'socialmedia'),
    'weight' => 0,
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  $items['admin/config/media/socialmedia/widgets/share'] = array(
    'title' => 'Default share set',
    'description' => 'Social media default profile widget sets configuration',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialmedia_admin_share_widgets_form'),
    'access arguments' => array('administer social media'),
    'file' => 'socialmedia.admin.inc',
    'file path' => drupal_get_path('module', 'socialmedia'),
    'weight' => 0,
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/media/socialmedia/setup'] = array(
    'title' => 'Setup wizard',
    'description' => 'Setup wizard to help you get started quickly.',
    'page callback' => 'socialmedia_admin_setup',
    'page arguments' => array(5),
    'access arguments' => array('administer social media'),
    'file' => 'socialmedia.setup.inc',
    'file path' => drupal_get_path('module', 'socialmedia'),
    'weight' => 2,
    'type' => MENU_LOCAL_ACTION,
    //'type' => MENU_CALLBACK,
  );
  $items['user/%user/socialmedia'] = array(
    'title' => 'Social profiles',
    'description' => 'User social media profiles',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('socialmedia_admin_profiles_form', 'user', 1),
    //'page arguments' => array(),
    'access arguments' => array('administer own profiles'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'socialmedia.admin.inc',
  );
  $items['socialmedia/util'] = array(
    'title' => t('Social media util'),
    'page callback' => 'socialmedia_util',
    'access arguments' => array('access link intelligence'),
    'type' => MENU_CALLBACK,
  );
  $items['socialmedia/util_pattern'] = array(
    'title' => t('Social media pattern util'),
    'page callback' => 'socialmedia_util_pattern',
    'access arguments' => array('access link intelligence'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

function socialmedia_util() {
	
  $str = 'some stuff [?bob=pre{default}post?] more stuff';
  $str = 'data-width="[?width=[socialmedia:sm-default_width]?]" [?height=data-height="{[socialmedia:sm-default_width]}"?] data-show-faces';
  $matches = widgets_field_scan($str, FALSE);

  return '';
}

function socialmedia_util_pattern() {
  $str = <<<EOF
Twitter url: [socialmedia:twitter_url] 
Twitter @username: [socialmedia:twitter_amp-username]  
  
EOF;
  $output = $str;
  $output .= "<br /><br />";
  $output .= token_replace($str);

  return $output;
}


/**
 * Implements hook_help().
 */
function socialmedia_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/socialmedia':
      return t('This is some help text for the socialmedia settings page.');

    case 'admin/help#socialmedia':
      $output = '<p>' . t('This is help text for the socialmedia help page') . '</p>';
      return $output;
  }
}

function socialmedia_profile_save($profile, $platform, $uid = 0) {
  $query = db_merge('socialmedia_profile');
  $query->key(array(
    'platform' => $platform,
    'uid' => $uid,
  ));
  $query->fields(array(
    'data' => serialize($profile),
  ));
  $id = $query->execute();
}

function socialmedia_profile_load($platform, $uid = 0) {
  static $profiles = array();
  if (isset($profiles[$platform][$uid])) {
    return $profiles[$platform][$uid];
  }
  
  $query = db_select('socialmedia_profile', 'a')
    ->fields('a')
    ->condition('a.platform', $platform)
    ->condition('a.uid', $uid);
  $result = $query->execute()->fetchAssoc();
  if(!$result) {
    return FALSE; 
  }
  $profile = unserialize($result['data']);
  $profile['result'] = $result;
  
  $profiles[$platform][$uid] = $profile;
  return $profile;
}

/**
 * Pull in image elements exposed by modules implementing hook_widgetx_element_info().
 *
 * @return
 *   An array of image elements to be used when transforming images.
 * @see hook_widgetx_element_info()
 * @see widgetx_element_definition_load()
 */
function socialmedia_platform_definitions() {
  global $language;
  static $platforms = NULL;
  
  if (isset($platforms)) {
  	return $platforms;
  }

  $platforms = array();
  include_once drupal_get_path('module', 'socialmedia') . '/socialmedia.platforms.inc';
  foreach (module_implements('socialmedia_platform_info') as $module) {
    foreach (module_invoke($module, 'socialmedia_platform_info') as $name => $platform) {
      // Ensure the current toolkit supports the element.
      $platform['module'] = $module;
      $platform['name'] = $name;
      $platform['title'] = $platform['title'];
      $platform['data'] = isset($platform['data']) ? $platform['data'] : array();
      $platforms[$name] = $platform;
    }
  }
   
  return $platforms;
}

/**
 * Load the definition for an widget.
 *
 * The element definition is a set of core properties for an image element, not
 * containing any user-settings. The definition defines various functions to
 * call when configuring or executing an image element. This loader is mostly for
 * internal use within image.module. Use widgetx_element_load() or
 * widgetx_set_load() to get image elements that contain configuration.
 *
 * @param $element
 *   The name of the element definition to load.
 * @param $set
 *   An image set array to which this element will be added.
 * @return
 *   An array containing the image element definition with the following keys:
 *   - "element": The unique name for the element being performed. Usually prefixed
 *     with the name of the module providing the element.
 *   - "module": The module providing the element.
 *   - "help": A description of the element.
 *   - "function": The name of the function that will execute the element.
 *   - "form": (optional) The name of a function to configure the element.
 *   - "summary": (optional) The name of a theme function that will display a
 *     one-line summary of the element. Does not include the "theme_" prefix.
 */
function socialmedia_platform_definition_load($platform, $uid = NULL) {
  $definitions = socialmedia_platform_definitions();

  // If a set is specified, do not allow loading of default set
  // elements.
  if (isset($uid)) {
    $set = socialmedia_user_load($uid, NULL);
  }

  return isset($definitions[$platform]) ? $definitions[$platform] : FALSE;
}

function _socialmedia_widgets_set_error($element, $msg, $status = 'warning') {
  if (module_exists('widgets')) {
    if (user_access('administer socialmedia')) {
      widgets_set_error($element, $msg);
    }
    else {
      widgets_set_error($element);
    }
  }
}
