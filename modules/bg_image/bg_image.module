<?php
/**
 * @file
 * 
 * Allows for customizable background images per page
 */

/*****************************************************************************
* DRUPAL HOOKS
*****************************************************************************/

/**
 * Implements hook_menu().
 */
function bg_image_menu() {
  
  $items['admin/config/content/background-image'] = array(
    'title' => 'Background Image',
    'description' => t('Settings for how to apply the background image to the page'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bg_image_settings_form'),
    'access arguments' => array('administer background image'),
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function bg_image_permission() {
  return array(
    'administer background image' => array(
      'title' => t('Administer Background Image'),
    ),
  );
}

/**
 * Defines the settings for for bg_image
 */
function bg_image_settings_form($form, &$form_state) {
  // Init some variables
  $form = array();// '#validate' => array('bg_image_settings_form_validate'));
  $node_types = array('' => 'choose...');
  $node_fields = array('' => 'Choose a node type first...');
  // Options for repeating the image
  $repeat_options = bg_image_css_repeat_options();
  // Make an option list of node types
  foreach (node_type_get_types() as $id => $node_type) {
    $node_types[$id] = $node_type->name;
  }
  // If this is a page rebuild for AJAX callback we need 
  // create the field list for the specified node type
  // Only fields of the type 'media' and 'image' will be accepted
  if (isset($form_state['values']['bg_image_node_type']) && $form_state['values']['bg_image_node_type']) {
    $node_fields = bg_image_get_fields_for_node_type($form_state['values']['bg_image_node_type']);
  }
  elseif (variable_get('bg_image_node_type', '')) {
    $node_fields = bg_image_get_fields_for_node_type(variable_get('bg_image_node_type', ''));
  }
  
  // The fieldset for node settings
  $form['node'] = array(
    '#type' => 'fieldset',
    '#title' => t('Node Settings'),
    '#description' => t('The background images can be added using nodes as the interface to upload and manage the images. In order to use this feature you need to specify the node type and field name here. Some modules may require this to be done before they will work.'),
  );
  
  // Select a node type
  // AJAX will replace the field list once selected
  $form['node']['bg_image_node_type'] = array(
    '#type' => 'select',
    '#title' => t('Node Type'),
    '#description' => t('The node type that holds the image for use with background image.'),
    '#options' => $node_types,
    '#default_value' => variable_get('bg_image_node_type', ''),
    '#ajax' => array(
      'callback' => 'bg_image_node_type_ajax_callback',
      'wrapper' => 'bg-image-node-field',
    ),
  );
  
  // The actual field to use as the bg image
  $form['node']['bg_image_node_field'] = array(
    '#type' => 'select',
    '#title' => t('Node field'),
    '#description' => t('The field within the node type specified above to use as the image'),
    '#options' => $node_fields,
    '#default_value' => variable_get('bg_image_node_field', ''),
    '#prefix' => '<div id="bg-image-node-field">',
    '#suffix' => '</div>',
  );
  
  
  // The fieldset for exlusions
  $form['exclusions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Global Exclusions'),
    '#description' => t('Choose specific pages/sections to exclude the background image from appearing on. This will apply to all background images'),
  );
  
  $form['exclusions']['bg_image_exclude_admin'] = array(
    '#type' => 'checkbox',
    '#title' => t('Exclude from Admin Pages'),
    '#description' => t('Background Images will be ignored on admin pages.'),
    '#default_value' => variable_get('bg_image_exclude_admin', 0),
  );
  
  
  // Fieldset for css settings
  $form['css_settings'] = array(
    '#type' => 'fieldset',
    '#title' => t('Default CSS Settings'),
    '#description' => t('Default CSS settings for outputting the background property. These settings will be concatenated to form a complete css statement that uses the "background" property. For more information on the css background property see http://www.w3schools.com/css/css_background.asp"'),
  );
  // The selector for the background property
  $form['css_settings']['bg_image_selector'] = array(
    '#type' => 'textfield',
    '#title' => t('Selector'),
    '#description' => t('A valid CSS selector that will be used to apply the background image.'),
    '#default_value' => variable_get('bg_image_selector', ''),
  );
  // The selector for the background property
  $form['css_settings']['bg_image_color'] = array(
    '#type' => 'textfield',
    '#title' => t('Color'),
    '#description' => t('The background color formatted as any valid css color format (e.g. hex, rgb, text, hsl) [<a href="http://www.w3schools.com/css/pr_background-color.asp">css property: background-color</a>]'),
    '#default_value' => variable_get('bg_image_color', '#FFFFFF'),
  );
  // The selector for the background property
  $form['css_settings']['bg_image_x'] = array(
    '#type' => 'textfield',
    '#title' => t('Horizontal Alignment'),
    '#description' => t('The horizontal alignment of the background image formatted as any valid css alignment. [<a href="http://www.w3schools.com/css/pr_background-position.asp">css property: background-position</a>]'),
    '#default_value' => variable_get('bg_image_x', 'left'),
  );
  // The selector for the background property
  $form['css_settings']['bg_image_y'] = array(
    '#type' => 'textfield',
    '#title' => t('Vertical Alignment'),
    '#description' => t('The vertical alignment of the background image formatted as any valid css alignment. [<a href="http://www.w3schools.com/css/pr_background-position.asp">css property: background-position</a>]'),
    '#default_value' => variable_get('bg_image_y', 'top'),
  );
  // The selector for the background property
  $form['css_settings']['bg_image_attachment'] = array(
    '#type' => 'radios',
    '#title' => t('Background Attachment'),
    '#description' => t('The attachment setting for the background image. [<a href="http://www.w3schools.com/css/pr_background-attachment.asp">css property: background-attachment</a>]'),
    '#options' => array('scroll' => 'Scroll', 'fixed' => 'Fixed'),
    '#default_value' => variable_get('bg_image_attachment', 'scroll'),
  );
  // The background-repeat property
  $form['css_settings']['bg_image_repeat'] = array(
    '#type' => 'radios',
    '#title' => t('Background Repeat'),
    '#description' => t('Define the repeat settings for the background image. [<a href="http://www.w3schools.com/css/pr_background-repeat.asp">css property: background-repeat</a>]'),
    '#options' => $repeat_options,
    '#default_value' => variable_get('bg_image_repeat', 'no-repeat'),
  );
  $form['css_settings']['bg_image_important'] = array(
    '#type' => 'checkbox',
    '#title' => t('Add "!important" to the background property.'),
    '#description' => t('This can be helpful to override any existing background image or color properties added by the theme.'),
    '#default_value' => variable_get('bg_image_important', 1),
  );
  
  return system_settings_form($form);
}

/**
 * AJAX Callback after Node Type has been chosen.
 */
function bg_image_node_type_ajax_callback($form, $form_state) {
  return $form['node']['bg_image_node_field'];
}

/**
 * Returns the fields for a given node type
 * Only fields of the type 'media' and 'image' will be accepted
 */
function bg_image_get_fields_for_node_type($node_type) {
  // Array to hold our fields
  $fields = array();
  // Get all the fields. We'll use this to determine the field type
  $all_fields = field_info_fields();
  // Loop through the fields of the node type
  foreach (field_info_instances('node', $node_type) as $field_name => $field) {
    // Check that it's a media field or an image field
    if ($all_fields[$field_name]['type'] == 'image' || $all_fields[$field_name]['type'] == 'media') {
      // Add the item to our option list
      $fields[$field_name] = $field['label'];
    }
  }
  // If there were not fields, we return a message 
  if (!$fields) {
    $fields[''] = 'No media or image fields attached to this node type';
  }
  return $fields;
}


/*****************************************************************************
* API FUNCTIONS
*****************************************************************************/

/**
* Adds a background image to the page using the 
* css 'background' property.
* 
* @param $image_path
*    The path of the image to use 
* 
* @param $css_settings
*    An array of css settings to use. Possible values are:
*      - bg_image_selector: The css selector to use
*      - bg_image_color: The background color
*      - bg_image_x: The x offset
*      - bg_image_y: The y offset
*      - bg_image_attachment: The attachment property (scroll or fixed)
*      - bg_image_repeat: The repeat settings
*    Default settings will be used for any values not provided.
* 
* @return
*   Returns TRUE if successful or FALSE otherwise
*/
function bg_image_add_background_image($image_path, $css_settings = array()) {
  
  // Pull the default css setting if not provided.
  $selector = isset($css_settings['bg_image_selector']) ? $css_settings['bg_image_selector'] : variable_get('bg_image_selector', '');
  $bg_color = isset($css_settings['bg_image_color']) ? $css_settings['bg_image_color'] : variable_get('bg_image_color', '#FFFFFF');
  $bg_x = isset($css_settings['bg_image_x']) ? $css_settings['bg_image_x'] : variable_get('bg_image_x', 'left');
  $bg_y = isset($css_settings['bg_image_y']) ? $css_settings['bg_image_y'] : variable_get('bg_image_y', 'top');
  $attachment = isset($css_settings['bg_image_attachment']) ? $css_settings['bg_image_attachment'] : variable_get('bg_image_attachment', 'scroll');
  $repeat = isset($css_settings['bg_image_repeat']) ? $css_settings['bg_image_repeat'] : variable_get('bg_image_repeat', 'no-repeat');
  $important = isset($css_settings['bg_image_important']) ? $css_settings['bg_image_important'] : variable_get('bg_image_important', 1);

  // If important is true, we turn it into a string for css output
  if ($important) {
    $important = ' !important';
  }
  else {
    $important = '';
  }

  // See if admin pages are excluded from bg images
  $admin = variable_get('bg_image_exclude_admin', 0) ? !path_is_admin($_GET['q']) : TRUE;
  
  // Add the css if we have everything we need.
  if ($selector && $image_path && $admin) {
    $style = $selector.'{background: ' . $bg_color . ' url('.$image_path.') ' . $repeat . ' '.$attachment.' '.$bg_x.' '.$bg_y.$important.';}';
    drupal_add_css($style, array('type' => 'inline', 'media' => 'all', 'group' => CSS_THEME));
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Determines the path of an image on the configured image
 * field on a node and returns it.
 *
 * @param $nid
 *   The nid of the node to check for an image
 *
 * @param $build_url
 *   Optional parameter to return the full URL
 *   of the image rather than just the uri
 *
 * @return
 *   The path of the image if the node has it, or FALSE.
 */
function bg_image_get_image_path_from_node($nid, $build_url = TRUE) {
  $fields = field_info_fields();
  $field_name = variable_get('bg_image_node_field', '');
  $node = node_load($nid);
  $image_path = FALSE;
  if ($node && $field_name) {
    if (isset($fields[$field_name]) && $fields[$field_name]['type'] == 'media') {
      if ($node->{$field_name}) {
        $items = field_get_items('node', $node, $field_name);
        $file = file_load($items[0]['fid']);
        if ($file && $file->type == 'image') {
          $image_path = $file->uri;
        }
      }
    }
    elseif (isset($fields[$field_name]) && $fields[$field_name]['type'] == 'image') {
      if ($node->{$field_name}) {
        $items = field_get_items('node', $node, $field_name);
        if (isset($items[0]['uri'])) {
          $image_path = $items[0]['uri'];
        }
      }
    }
  }
  if ($image_path && $build_url) {
    $image_path = file_create_url($image_path);
  }
  return $image_path;
}

/**
* Adds a background image to the page using an image from
* a node. The node must have an image (or media) field and 
* the field must be configured on the bg_image configuration
* page for this to work.
* 
* @param $nid
*    The nid of the node that has the image to use for the
*    background. Use 0 to generate a random image from the
*    configured node type.
* 
* @param $css_settings
*    An array of css settings to use. See bg_image_add_background_image()
*    for more detailed description of possible values.
*/
function bg_image_add_background_image_from_node($nid, $css_settings = array()) {
  
  if ($nid == 0) {
    $type = variable_get('bg_image_node_type', '');
    if ($type) {
      // Generate a random nid of the configured node type
      $nid = db_select('node')
        ->fields('node', array('nid'))
        ->condition('node.type', $type)
        ->orderRandom()
        ->execute()
        ->fetchField();
    }
    else {
      return FALSE;
    }
  }
  // Get the path of the image on the node
  $image_path = bg_image_get_image_path_from_node($nid);
  // Add the background image
  return bg_image_add_background_image($image_path, $css_settings);

}

/**
 * Check if a node has an image set on the configured field
 * 
 * @param $nid
 *    The nid of the node to check
 * 
 * @return
 *    If the node has an image set for the field
 *    returns TRUE, otherwise returns FALSE
 */
function bg_image_field_has_image($nid) {
  $node = node_load($nid);
  $field_name = variable_get('bg_image_node_field', '');
  if ($node && $node->{$field_name}) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns an array of nids to node titles for the
 * configured node type. Useful for select lists.
 *
 * @param $include_nid
 *    Include the nid as text after the title. TRUE
 *    or FALSE. e.g.: array(1 => 'node title [nid: 1]')
 */
function bg_image_node_options($include_nid = TRUE, $include_random = TRUE) {
  $node_type = variable_get('bg_image_node_type', '');
  // Our query
  $sql = "SELECT nid, title FROM {node} WHERE type = :node_type";
  $result = db_query($sql, array(':node_type' => $node_type));
  foreach ($result as $record) {
    if ($include_nid) {
      $node_options[$record->nid] = $record->title . ' [nid:' . $record->nid. ']';
    }
    else {
      $node_options[$record->nid] = $record->title;
    }
  }
  if (!$node_options) {
    return FALSE;
  }
  else {
    if ($include_random) {
      return array(0 => '- Random -') + $node_options;;
    }
    else {
      return $node_options;
    }
  }
}

/**
 * Checks if a node (and field) is configured.
 */
function bg_image_node_is_configured() {
  if (variable_get('bg_image_node_type', '') && variable_get('bg_image_node_field', '')) {
    return TRUE;
  }
  else {
    return FALSE;
  }
}

/**
 * Returns an options list of css repeat options
 */
function bg_image_css_repeat_options() {
  return array(
    'no-repeat' => t('No Repeat'),
    'repeat' => t('Tiled (repeat)'),
    'repeat-x' => t('Repeat Horizontally (repeat-x)'),
    'repeat-y' => t('Repeat Vertically (repeat-y)'),
  );
}