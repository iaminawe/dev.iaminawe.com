diff --git a/custom-pager.tpl.php b/custom-pager.tpl.php
index 4f856e0..253c642 100644
--- a/custom-pager.tpl.php
+++ b/custom-pager.tpl.php
@@ -1,5 +1,4 @@
 <?php
-
 /**
  * @file
  * custom-pager.tpl.php
diff --git a/custom_pagers.admin.inc b/custom_pagers.admin.inc
index 88210b2..3797dd6 100644
--- a/custom_pagers.admin.inc
+++ b/custom_pagers.admin.inc
@@ -1,11 +1,14 @@
 <?php
-
 /**
  * @file
  * Admin functionality for the custom pagers module.
  */
 
 // Lists all current custom pagers, and provides a link to the edit page.
+/**
+ * @todo Please document this function.
+ * @see http://drupal.org/node/1354
+ */
 function custom_pagers_page() {
   $pagers = _custom_pagers_load_all_pagers(TRUE);
 
@@ -17,21 +20,29 @@ function custom_pagers_page() {
     $row[] = $pager->title;
     $row[] = !empty($pager->list_php) ? t('PHP snippet') : t('%view_name view', array('%view_name' => $pager->view));
     $row[] = !empty($pager->visibility_php) ? t('PHP snippet') : t('%node_type nodes', array('%node_type' => $pager->node_type));
-    $row[] =  l(t('edit'), 'admin/build/custom_pagers/edit/' . $pager->pid);
+    $row[] =  l(t('edit'), 'admin/structure/custom_pagers/edit/' . $pager->pid);
     $rows[] = $row;
   }
   if (count($rows) == 0) {
-    $rows[] = array(array('data' => t('No custom pagers have been defined.'), 'colspan' => 3));
+    $rows[] = array(array(
+        'data' => t('No custom pagers have been defined.'),
+        'colspan' => 3,
+      ));
   }
 
-  $rows[] = array(array('data' => l(t('Add a new custom pager'), 'admin/build/custom_pagers/add'), 'colspan' => 2));
+  $rows[] = array(array(
+      'data' => l(t('Add a new custom pager'), 'admin/structure/custom_pagers/add'),
+      'colspan' => 2,
+    ));
 
-  return theme('table', $header, $rows);
+  return theme('table', array('header' => $header, 'rows' => $rows));
 }
 
 
-// Displays an edit form for a custom pager record.
-function custom_pagers_form(&$form_state, $pid = NULL) {
+/**
+ * Displays an edit form for a custom pager record.
+ */
+function custom_pagers_form($form, &$form_state, $pid = NULL) {
   if (isset($pid) && $pager = _custom_pagers_load_pager($pid)) {
     $form['pid'] = array(
       '#type' => 'hidden',
@@ -52,11 +63,11 @@ function custom_pagers_form(&$form_state, $pid = NULL) {
     '#title' => t('Pager position'),
     '#required' => TRUE,
     '#options' => array(
-                    'top' => t("Above the node's body"),
-                    'bottom' => t("Below the node's body"),
-                    'both' => t("Both above and below the node's body"),
-                    'block' => t("In a sidebar block"),
-                  ),
+      'top' => t("Above the node's body"),
+      'bottom' => t("Below the node's body"),
+      'both' => t("Both above and below the node's body"),
+      'block' => t("In a sidebar block"),
+    ),
     '#description' => t('The node type(s) this custom pager will apply to.'),
     '#default_value' => $pid ? $pager->position : NULL,
   );
@@ -82,7 +93,7 @@ function custom_pagers_form(&$form_state, $pid = NULL) {
     '#title' => t('By node type'),
     '#required' => TRUE,
     '#multiple' => TRUE,
-    '#options' => node_get_types('names'),
+    '#options' => node_type_get_names(),
     '#description' => t('If the PHP field is filled in, this field will be ignored.'),
     '#default_value' => $pid ? explode(',', $pager->node_type) : NULL,
   );
@@ -147,7 +158,7 @@ function custom_pagers_form(&$form_state, $pid = NULL) {
       '#required' => TRUE,
       '#options' => $options,
       '#description' => t('A view used to populate the pager. The nodes will appear in the pager in the same order they are displayed in the view. If the PHP field is populated, this will be ignored.'),
-      '#default_value' => $pid ? $pager->view : NULL
+      '#default_value' => $pid ? $pager->view : NULL,
     );
 
     $form['node_list']['args'] = array(
@@ -155,7 +166,7 @@ function custom_pagers_form(&$form_state, $pid = NULL) {
       '#title' => t('View arguments'),
       '#required' => FALSE,
       '#description' => t('A return-delimited list of arguments to pass into the selected view. If Token.module is enabled, placeholder tokens like [type] and [author] can be used.'),
-      '#default_value' => $pid ? $pager->args : NULL
+      '#default_value' => $pid ? $pager->args : NULL,
     );
 
     $form['help'] = array(
@@ -167,6 +178,7 @@ function custom_pagers_form(&$form_state, $pid = NULL) {
     );
 
     if (module_exists('token')) {
+      // TODO Please change this theme call to use an associative array for the $variables parameter.
       $form['help']['tokens'] = array(
         '#value' => theme('token_help', 'node'),
       );
@@ -183,7 +195,7 @@ function custom_pagers_form(&$form_state, $pid = NULL) {
     '#title' => t('Reverse the list of nodes'),
     '#return_value' => 1,
     '#description' => t("The natural list view ordering for an archive is the opposite of the natural 'previous/next' order for a pager. As such, reversing the pager list is useful when using a single view for paging and other sorted lists (pages, blocks, etc)."),
-    '#default_value' => $pid ? $pager->reverse_list : NULL
+    '#default_value' => $pid ? $pager->reverse_list : NULL,
   );
 
   $form['buttons']['submit'] = array(
@@ -200,14 +212,18 @@ function custom_pagers_form(&$form_state, $pid = NULL) {
   return $form;
 }
 
+/**
+ * @todo Please document this function.
+ * @see http://drupal.org/node/1354
+ */
 function custom_pagers_form_submit(&$form, &$form_state) {
   if ($form_state['values']['op'] == t('Delete')) {
     _custom_pagers_delete_pager($form_state['values']['pid']);
   }
   else {
-    $pager = (object)$form_state['values'];
+    $pager = (object) $form_state['values'];
     $pager->node_type = implode(',', $pager->node_type);
     _custom_pagers_save_pager($pager);
   }
-  $form_state['redirect'] = 'admin/build/custom_pagers';
+  $form_state['redirect'] = 'admin/structure/custom_pagers';
 }
diff --git a/custom_pagers.info b/custom_pagers.info
index b140a0f..e385b74 100644
--- a/custom_pagers.info
+++ b/custom_pagers.info
@@ -1,3 +1,8 @@
 name = Custom Pagers
-core = 6.x
+core = 7.x
 description = Allows administrators to define custom pagers for navigation in lists of nodes.
+package = Other
+
+files[] = views/custom_pagers.views.inc
+files[] = views/custom_pagers_plugin_display_simple.inc
+files[] = views/custom_pagers_plugin_style_php_array.inc
diff --git a/custom_pagers.install b/custom_pagers.install
index 1dbc4f4..82245e0 100644
--- a/custom_pagers.install
+++ b/custom_pagers.install
@@ -1,17 +1,13 @@
 <?php
-
 /**
  * @file
  * Custom pagers install file.
  */
 
+
 /**
- * Implementation of hook_install().
+ * Implements hook_schema()
  */
-function custom_pagers_install() {
-  drupal_install_schema('custom_pagers');
-}
-
 function custom_pagers_schema() {
   $schema['custom_pager'] = array(
     'description' => 'Stores data for previous/next pagers to be added to nodes.',
@@ -81,54 +77,3 @@ function custom_pagers_schema() {
   );
   return $schema;
 }
-
-
-function custom_pagers_update_1() {
-  $ret = array();
-  db_add_field($ret, 'custom_pager', 'list_php', array(
-    'type' => 'text',
-    'not null' => FALSE,
-    'size' => 'big',
-    'description' => 'Raw PHP to populate this {custom_pager}.',
-  ));
-  db_add_field($ret, 'custom_pager', 'visibility_php', array(
-    'type' => 'text',
-    'not null' => FALSE,
-    'size' => 'big',
-    'description' => 'Raw PHP to determine when the {custom_pager} should be displayed.',
-  ));
-  return $ret;
-}
-
-function custom_pagers_update_2() {
-  $ret = array();
-  db_add_field($ret, 'custom_pager', 'cache_list', array(
-    'type' => 'int',
-    'not null' => TRUE,
-    'default' => 0,
-    'size' => 'tiny',
-    'description' => "A boolean flag indicating that this {custom_pager}'s list of nodes should be cached.",
-  ));
-  db_add_field($ret, 'custom_pager', 'reverse_list', array(
-    'type' => 'int',
-    'not null' => TRUE,
-    'default' => 0,
-    'size' => 'tiny',
-    'description' => 'A boolean flag indicating that this {custom_pager} should be displayed in reverse order.',
-  ));
-  return $ret;
-}
-
-
-/**
- * Kill the cache flag as it's not actually that helpful.
- */
-function custom_pagers_update_6104() {
-  $ret = array();
-  db_drop_field($ret, 'custom_pager', 'cache_list');
-  return $ret;
-}
-
-function custom_pagers_uninstall() {
-  drupal_uninstall_schema('custom_pagers');
-}
diff --git a/custom_pagers.module b/custom_pagers.module
index 69ee516..3df67ff 100644
--- a/custom_pagers.module
+++ b/custom_pagers.module
@@ -1,18 +1,17 @@
 <?php
-
 /**
  * @file
  * Allows administrators to define context-sensitive previous/next pagers for any node type.
  */
 
 /**
- * Implementation of hook_menu().
+ * Implements hook_menu().
  */
 function custom_pagers_menu() {
   $items = array();
 
   $access = user_access('administer custom pagers');
-  $items['admin/build/custom_pagers'] = array(
+  $items['admin/structure/custom_pagers'] = array(
     'title' => 'Custom pagers',
     'description' => 'Add custom pagers for content types.',
     'page callback' => 'custom_pagers_page',
@@ -20,8 +19,8 @@ function custom_pagers_menu() {
     'file' => 'custom_pagers.admin.inc',
   );
 
-  $items['admin/build/custom_pagers/add'] = array(
-    'path' => 'admin/build/custom_pagers/add',
+  $items['admin/structure/custom_pagers/add'] = array(
+    'path' => 'admin/structure/custom_pagers/add',
     'title' => 'Add custom pager',
     'type' => MENU_CALLBACK,
     'page callback' => 'drupal_get_form',
@@ -30,7 +29,7 @@ function custom_pagers_menu() {
     'file' => 'custom_pagers.admin.inc',
   );
 
-  $items['admin/build/custom_pagers/edit'] = array(
+  $items['admin/structure/custom_pagers/edit'] = array(
     'title' => 'Edit custom pager',
     'type' => MENU_CALLBACK,
     'page callback' => 'drupal_get_form',
@@ -42,14 +41,29 @@ function custom_pagers_menu() {
   return $items;
 }
 
-function custom_pagers_perm() {
-  return array('administer custom pagers', 'use php in custom pagers');
+/**
+ * Implements hook_permission()
+ */
+function custom_pagers_permission() {
+  return array(
+    'administer custom pagers' => array(
+      'title' => t('administer custom pagers'),
+      'description' => t('TODO Add a description for \'administer custom pagers\''),
+    ),
+    'use php in custom pagers' => array(
+      'title' => t('use php in custom pagers'),
+      'description' => t('TODO Add a description for \'use php in custom pagers\''),
+    ),
+  );
 }
 
+/**
+ * Implements hook_theme()
+ */
 function custom_pagers_theme() {
   return array(
     'custom_pager' => array(
-      'arguments' => array(
+      'variables' => array(
         'nav_array' => NULL,
         'node' => NULL,
         'pager' => NULL,
@@ -60,71 +74,103 @@ function custom_pagers_theme() {
   );
 }
 
-function custom_pagers_nodeapi(&$node, $op, $teaser, $page) {
-  switch ($op) {
-    case 'view':
-      // We want to make sure we don't try to output when print.module is active.
-      // It's a bit of special casing but it doesn't do much harm.
-      if ($teaser == FALSE && empty($node->printing)) {
-        $node->custom_pagers = _custom_pagers_load_all_pagers();
-        foreach ($node->custom_pagers as $pager) {
-          if ($pager->position != 'block' && _custom_pagers_visibility($pager, $node)) {
-            $nav_array = custom_pager_build_nav($pager, $node);
-            if ($nav_array['current_index'] != -1) {
-              switch ($pager->position) {
-                case 'top':
-                  $node->content['custom_pager_top'][$pager->pid] = array('#value' => theme('custom_pager', $nav_array, $node, $pager, 'top'));
-                  break;
-                case 'bottom':
-                  $node->content['custom_pager_bottom'][$pager->pid] = array('#value' => theme('custom_pager', $nav_array, $node, $pager, 'bottom'));
-                  break;
-                case 'both':
-                  $node->content['custom_pager_top'][$pager->pid] = array('#value' => theme('custom_pager', $nav_array, $node, $pager, 'top'));
-                  $node->content['custom_pager_bottom'][$pager->pid] = array('#value' => theme('custom_pager', $nav_array, $node, $pager, 'bottom'));
-                  break;
-              }
-            }
+/**
+ * Implements hook_node_view().
+ */
+function custom_pagers_node_view($node, $view_mode = 'full') {
+  // We want to make sure we don't try to output when print.module is active.
+  // It's a bit of special casing but it doesn't do much harm.
+  if (node_is_page($node) && empty($node->printing)) {
+    $node->custom_pagers = _custom_pagers_load_all_pagers();
+    foreach ($node->custom_pagers as $pager) {
+      if ($pager->position != 'block' && _custom_pagers_visibility($pager, $node)) {
+        $nav_array = custom_pager_build_nav($pager, $node);
+        if ($nav_array['current_index'] != -1) {
+          switch ($pager->position) {
+            case 'top':
+              $node->content['custom_pager_top'][$pager->pid] = array(
+                '#markup' => theme('custom_pager', array(
+                  'nav_array' => $nav_array,
+                  'node' => $node,
+                  'pager' => $pager,
+                  'position' => 'top')
+                )
+              );
+              break;
+            case 'bottom':
+              $node->content['custom_pager_bottom'][$pager->pid] = array(
+                '#markup' => theme('custom_pager', array(
+                  'nav_array' => $nav_array,
+                  'node' => $node,
+                  'pager' => $pager,
+                  'position' => 'bottom')
+                )
+              );
+              break;
+            case 'both':
+              $node->content['custom_pager_top'][$pager->pid] = array(
+                '#markup' => theme('custom_pager', array(
+                  'nav_array' => $nav_array,
+                  'node' => $node,
+                  'pager' => $pager,
+                  'position' => 'top')
+                )
+              );
+              $node->content['custom_pager_bottom'][$pager->pid] = array(
+                '#markup' => theme('custom_pager', array(
+                  'nav_array' => $nav_array,
+                  'node' => $node,
+                  'pager' => $pager,
+                  'position' => 'bottom')
+                )
+              );
+              break;
           }
         }
-        if (isset($node->content['custom_pager_top'])) {
-          $node->content['custom_pager_top']['#weight'] = -100;
-        }
-        if (isset($node->content['custom_pager_bottom'])) {
-          $node->content['custom_pager_bottom']['#weight'] = 100;
-        }
       }
-      break;
+    }
+    if (isset($node->content['custom_pager_top'])) {
+      $node->content['custom_pager_top']['#weight'] = -100;
+    }
+    if (isset($node->content['custom_pager_bottom'])) {
+      $node->content['custom_pager_bottom']['#weight'] = 100;
+    }
   }
 }
 
 /**
- * Implementation of hook_block().
- *
- * Generates a block with a pager for the current node.
+ * Implements hook_block_info().
  */
-function custom_pagers_block($op = 'list', $delta = 0) {
-  if ($op == 'list') {
-    $pagers = _custom_pagers_load_all_pagers();
-    foreach ($pagers as $pager) {
-      if ($pager->position == 'block') {
-        $blocks[$pager->pid]['info'] = $pager->title;
-      }
+function custom_pagers_block_info() {
+  $blocks = array();
+  $pagers = _custom_pagers_load_all_pagers();
+  foreach ($pagers as $pager) {
+    if ($pager->position == 'block') {
+      $blocks[$pager->pid]['info'] = $pager->title;
     }
-    return $blocks;
   }
-  else if ($op == 'view' && arg(0) == 'node' && $node = menu_get_object()) {
+  return $blocks;
+}
+
+/**
+ * Implements hook_block_view().
+ *
+ * Generates a block with a pager for the current node.
+ */
+function custom_pagers_block_view($delta = '') {
+  if (arg(0) == 'node' && $node = menu_get_object()) {
     $pagers = _custom_pagers_load_all_pagers();
     if ($pager = $pagers[$delta]) {
       if ($pager->position == 'block' && _custom_pagers_visibility($pager, $node)) {
         $nav_array = custom_pager_build_nav($pager, $node);
         if ($nav_array['current_index'] != -1) {
           if (module_exists('token')) {
-            $block['subject'] = token_replace($pager->title, 'node', $node);
+            $block['subject'] = token_replace($pager->title, array('node' => $node));
           }
           else {
             $block['subject'] = $pager->title;
           }
-          $block['content'] = theme('custom_pager', $nav_array, $node, $pager, 'block');
+          $block['content'] = theme('custom_pager', array('nav_array' => $nav_array, 'node' => $node, 'pager' => $pager, 'position' => 'block'));
           return $block;
         }
       }
@@ -134,8 +180,8 @@ function custom_pagers_block($op = 'list', $delta = 0) {
 
 function _custom_pagers_load_pager($pid) {
   $sql = 'SELECT * FROM {custom_pager} WHERE pid = %d';
-  $result = db_query($sql, $pid);
-  $pager = db_fetch_object($result);
+  $result = db_query('SELECT * FROM {custom_pager} WHERE pid = :pid', array(':pid' => $pid));
+  $pager = $result->fetchObject();
   return $pager;
 }
 
@@ -146,7 +192,7 @@ function _custom_pagers_load_all_pagers($refresh = FALSE) {
     $result = db_query($sql);
 
     $pagers = array();
-    while ($pager = db_fetch_object($result)) {
+    foreach ($result as $pager) {
       $pagers[$pager->pid] = $pager;
     }
   }
@@ -164,8 +210,7 @@ function _custom_pagers_save_pager($pager = NULL) {
 }
 
 function _custom_pagers_delete_pager($pid) {
-  $sql = 'DELETE FROM {custom_pager} WHERE pid = %d';
-  db_query($sql, $pid);
+  db_delete('custom_pager')->condition('pid', $pid)->execute();
 }
 
 function _custom_pagers_visibility($pager, $node) {
@@ -214,6 +259,7 @@ function custom_pager_build_nav($pager, $node) {
 
 // Helper functions to pull proper entries from a list of nids.
 function pager_entries_by_val($value, $list) {
+
   $list = array_values($list);
   foreach ($list as $k => $v) {
     if ($v == $value) {
@@ -233,7 +279,7 @@ function pager_entries_by_key($key, $list, $increment = 1) {
     'prev' => $list[max($key - $increment, 0)],
     'next' => $list[min($key + $increment, (count($list) - 1))],
     'last' => $list[count($list) - 1],
-    'full_list' => $list
+    'full_list' => $list,
   );
 
   foreach ($nav as $k => $v) {
@@ -246,19 +292,23 @@ function pager_entries_by_key($key, $list, $increment = 1) {
   return $nav;
 }
 
+/**
+ * @todo Please document this function.
+ * @see http://drupal.org/node/1354
+ */
 function custom_pagers_get_list_from_view($pager, $node) {
   if ($view = views_get_view($pager->view)) {
     $display = $view->add_display('custom_pagers_simple');
-  
+
     $view->set_display($display);
     $view->display_handler->set_option('style_plugin', 'custom_pagers_php_array');
     $view->display_handler->set_option('items_per_page', 0);
 
     // Get arguments for the view.
     if (!empty($pager->args)) {
-      $args = array_map('trim', explode("\n", $pager->args));
-      if (module_exists('token')) {
-        $args = token_replace($args, 'node', $node);
+      $args = explode("\n", $pager->args);
+      foreach($args as &$arg) {
+        $arg = token_replace(trim($arg), array('node' => $node));
       }
     }
     else {
@@ -271,6 +321,7 @@ function custom_pagers_get_list_from_view($pager, $node) {
 
     // Get the results.
     $result = $view->execute_display($display, $args);
+
   }
   else {
     $result = FALSE;
@@ -279,24 +330,24 @@ function custom_pagers_get_list_from_view($pager, $node) {
 }
 
 function template_preprocess_custom_pager(&$vars) {
-  drupal_add_css(drupal_get_path('module', 'custom_pagers') .'/custom_pagers.css');
+  drupal_add_css(drupal_get_path('module', 'custom_pagers') . '/custom_pagers.css');
   $node = $vars['node'];
   $pager = $vars['pager'];
   $nav = $vars['nav_array'];
 
-  $vars['previous'] = !empty($nav['prev']) ? l('‹ ' . t('previous'), 'node/'. $nav['prev']) : '';
+  $vars['previous'] = !empty($nav['prev']) ? l('‹ ' . t('previous'), 'node/' . $nav['prev']) : '';
   $vars['key'] = t('@count of @count_total', array('@count' => ($nav['current_index'] + 1), '@count_total' => count($nav['full_list'])));
-  $vars['next'] =  !empty($nav['next']) ? l(t('next') . ' ›', 'node/'. $nav['next']) : '';
+  $vars['next'] =  !empty($nav['next']) ? l(t('next') . ' ›', 'node/' . $nav['next']) : '';
 
-  $vars['template_files'][] = "custom-pager-{$vars['position']}";
-  $vars['template_files'][] = "custom-pager-$node->type";
-  $vars['template_files'][] = "custom-pager-$node->type-{$vars['position']}";
-  $vars['template_files'][] = "custom-pager-$pager->pid";
-  $vars['template_files'][] = "custom-pager-$pager->pid-{$vars['position']}";
+  $vars['theme_hook_suggestions'][] = "custom-pager-{$vars['position']}";
+  $vars['theme_hook_suggestions'][] = "custom-pager-$node->type";
+  $vars['theme_hook_suggestions'][] = "custom-pager-$node->type-{$vars['position']}";
+  $vars['theme_hook_suggestions'][] = "custom-pager-$pager->pid";
+  $vars['theme_hook_suggestions'][] = "custom-pager-$pager->pid-{$vars['position']}";
 }
 
 /**
- * Implementation of hook_views_api().
+ * Implements hook_views_api().
  */
 function custom_pagers_views_api() {
   return array(
diff --git a/views/custom_pagers.views.inc b/views/custom_pagers.views.inc
index 8d39481..3e9b5fc 100644
--- a/views/custom_pagers.views.inc
+++ b/views/custom_pagers.views.inc
@@ -1,5 +1,4 @@
 <?php
-
 /**
  * @file
  * Interface between content.module and views.module.
@@ -7,7 +6,7 @@
 
 
 /**
- * Implementation of hook_views_plugins.
+ * Implements hook_views_plugins().
  *
  * Defines some plugins used by the Views modes for
  * nodereference and userreference.
@@ -23,10 +22,11 @@ function custom_pagers_views_plugins() {
         'title' => 'Simple', // TODO: better name ? (currently not displayed anyway)
         'help' => 'Destination-agnostic display, designed for returning only a base table primary key.',
         'handler' => 'custom_pagers_plugin_display_simple',
+        'base' => array('node'),
         'no ui' => TRUE, // Programmatic use only.
         'uses hook menu' => FALSE,
         'use ajax' => FALSE,
-        'use pager' => FALSE,
+        'use pager' => 'none',
         'accept attachments' => FALSE,
       ),
     ),
@@ -40,7 +40,7 @@ function custom_pagers_views_plugins() {
         'handler' => 'custom_pagers_plugin_style_php_array',
         'no ui' => TRUE, // Programmatic use only.
         'uses row plugin' => FALSE,
-        'uses fields' => FALSE,
+        'uses fields' => TRUE,
         'type' => 'custom_pagers_simple',
         'even empty' => TRUE,
       ),
diff --git a/views/custom_pagers_plugin_display_simple.inc b/views/custom_pagers_plugin_display_simple.inc
index ddbb62e..a3782b2 100644
--- a/views/custom_pagers_plugin_display_simple.inc
+++ b/views/custom_pagers_plugin_display_simple.inc
@@ -1,5 +1,4 @@
 <?php
-
 /**
  * @file
  * Handler for 'custom_pagers_simple' display.
diff --git a/views/custom_pagers_plugin_style_php_array.inc b/views/custom_pagers_plugin_style_php_array.inc
index 0559b57..4808608 100644
--- a/views/custom_pagers_plugin_style_php_array.inc
+++ b/views/custom_pagers_plugin_style_php_array.inc
@@ -1,5 +1,4 @@
 <?php
-
 /**
  * @file
  * Handler for 'custom_pagers_php_array' style.
