<?php

/**
 * @file
 *
 * Responsive images module integrates the Responsive Images library
 * (https://github.com/filamentgroup/Responsive-Images) into Drupal.
 *
 * The goal of this technique is to deliver optimized, contextual image sizes
 * in responsive layouts that utilize dramatically different image sizes
 * at different resolutions.
 */

include_once DRUPAL_ROOT . '/' . drupal_get_path('module', 'responsive_images') . '/' . 'responsive_images.field.inc';

/**
 * Implements hook_library().
 */
function responsive_images_library() {
  $libraries['responsive_images'] = array(
    'title' => 'Responsive Images',
    'website' => 'https://github.com/filamentgroup/Responsive-Images/tree/cookie-driven',
    'version' => '',
    'js' => array(
      responsive_images_get_library_file() => array(),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_requirements().
 */
function responsive_images_requirements($phase) {
	$requirements = array();
  if ($phase == "runtime") {
    $library_path = responsive_images_get_library_file();
    $requirements['responsive_images'] = array(
      'title' => t('Responsive Images library'),
      'value' => t('Library is installed.'),
    );
    if (!file_exists($library_path)) {
      $requirements['responsive_images']['value'] = t('Library is not correctly installed');
      $requirements['responsive_images']['severity'] = REQUIREMENT_ERROR;
      $requirements['responsive_images']['description'] = t('Please follow the installation instructions in the responsive_images README.txt file');
    }
  }
  return $requirements;
}

/**
 * Get the path to the library directory
 */
function responsive_images_get_library_path() {
  if (function_exists('libraries_get_path')) {
    $path = libraries_get_path('responsive_images');
  }
  elseif (file_exists('sites/all/libraries/responsive_images') && is_dir('sites/all/libraries/responsive_images')) {
    $path = 'sites/all/libraries/responsive_images';
  }
  else {
    $path = drupal_get_path('module', 'responsive_images') . '/responsive_images';
  }
  return $path;
}

/**
 * Get the path to the library Javascript file
 */
function responsive_images_get_library_file() {
  return responsive_images_get_library_path() . '/rwd-images/rwd-images.js';
}

/**
 * Implements hook_init().
 */
function responsive_images_init() {
  // @TODO: should the script be loaded on each page?
  responsive_images_add_script();
}

/**
 * Implements hook_ctools_plugin_directory()
 */
function responsive_images_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && $plugin == 'export_ui') {
    return 'plugins/' . $plugin;
  }
}

/**
* Load a single responsive images set
*/
function responsive_images_set_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('responsive_images_set', 'names', array($name));
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Load all responsive images sets
 */
function responsive_images_set_load_all() {
  ctools_include('export');
  return ctools_export_load_object('responsive_images_set');
}

/**
 * Load all responsive images sets as an options list array
 */
function responsive_images_set_load_all_options() {
	$options = array();
  ctools_include('export');
  $all_sets = ctools_export_load_object('responsive_images_set');
	if ($all_sets) {
		foreach ($all_sets as $set) {
			$options[$set->name] = $set->label;
		}
	}
	return $options;
}

/**
 * Load all source styles (small style) that are already in use
 */
function responsive_images_get_used_styles($exclude = '') {
  $used_styles = array();
  $all_sets = responsive_images_set_load_all();
  if ($all_sets) {
    foreach ($all_sets as $set) {
      if ($set->small_style != $exclude) {
        $used_styles[$set->small_style] = $set->large_style;
      }
    }
  }
  return $used_styles;
}

/**
* Save a single responsive images set
*/
function responsive_images_set_save(&$responsive_images_set) {
  $update = (isset($responsive_images_set->id) && is_numeric($responsive_images_set->id)) ? array('id') : array();
  return drupal_write_record('responsive_images_sets', $responsive_images_set, $update);
}

/**
 * Add the responsive images script, and optionally settings
 */
function responsive_images_add_script() {
  $script = responsive_images_get_library_file();

  $widthBreakPoint = variable_get('responsive_images_widthBreakPoint', '');
  if (!empty($widthBreakPoint) && is_numeric($widthBreakPoint)) {
    $settings = <<<SETTINGS
  var rwd_images = {
		widthBreakPoint: {$widthBreakPoint},
	};
SETTINGS;
    drupal_add_js($settings, 'inline');
  }
	drupal_add_js($script);
}

/**
 * Implements hook_menu().
 */
function responsive_images_menu() {
  $items = array();

  $items['admin/config/media/responsive_images/settings'] = array(
    'title' => 'Settings',
    'description' => 'Responsive images settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('responsive_images_admin_settings'),
    'access arguments' => array('administer image styles'),
    'file' => 'responsive_images.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/media/responsive_images/instructions'] = array(
    'title' => 'Configuration instructions',
    'description' => 'Responsive images configuration instructions',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('responsive_images_admin_instructions'),
    'access arguments' => array('administer image styles'),
    'file' => 'responsive_images.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function responsive_images_theme() {
  return array(
    'responsive_images_formatter' => array(
      'variables' => array(
        'item' => NULL,
        'path' => NULL,
        'image_style' => NULL,
				'responsive_images_set' => array(),
      ),
    ),
    'responsive_image' => array(
      'variables' => array(
        'style_name' => NULL,
        'path' => NULL,
        'alt' => '',
        'title' => NULL,
        'attributes' => array(),
        'getsize' => TRUE,
				'responsive_images_set' => array(),
      ),
    ),
  );
}

/**
 * Returns HTML for a responsive image field formatter.
 *
 * @param $variables
 *   An associative array containing:
 *   - item: An array of image data.
 *   - image_style_small: An image style for small screens
 *   - image_style_large: An image style for normal screens
 *   - path: An array containing the link 'path' and link 'options'.
 *
 * @ingroup themeable
 */
function theme_responsive_images_formatter($variables) {
  $item = $variables['item'];

  $image = array(
    'path' => $item['uri'],
    'alt' => $item['alt'],
  );
  // Do not output an empty 'title' attribute.
  if (drupal_strlen($item['title']) > 0) {
    $image['title'] = $item['title'];
  }

  if (isset($variables['image_style'])) {
    $image['style_name'] = $variables['image_style'];
	}
	if (isset($variables['responsive_images_set'])) {
    $image['responsive_images_set'] = $variables['responsive_images_set'];
	}

	$output = theme('responsive_image', $image);

  if ($variables['path']) {
    $path = $variables['path']['path'];
    $options = $variables['path']['options'];
    // When displaying an image inside a link, the html option must be TRUE.
    $options['html'] = TRUE;
    $output = l($output, $path, $options);
  }

  return $output;
}

/**
 * Theme function to output a responsive image
 *
 * Based on theme_image_style & theme_image
 */
function theme_responsive_image($variables) {
  $path = image_style_url($variables['style_name'], $variables['path']);
	$pathinfo = pathinfo($path);
	$img_src = file_create_url($path);
	$extension = $pathinfo['extension'];
	$responsive_images_set = $variables['responsive_images_set'];

	// Add in "r." before the image extension, to make the image responsive
	$img_src = str_replace('.' . $extension, '.r.' . $extension, $img_src);

  $attributes = $variables['attributes'];
  $attributes['src'] = $img_src;

  foreach (array('width', 'height', 'alt', 'title') as $key) {

    if (isset($variables[$key])) {
      $attributes[$key] = $variables[$key];
    }
  }

  return '<img' . drupal_attributes($attributes) . ' />';
}